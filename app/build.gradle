apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

// load api key from properties file
def properties = new Properties()
file("$rootDir/api-keys.properties").withInputStream { properties.load(it) }

static def version() {
  return 'git rev-parse --short HEAD'.execute().text.trim()
}

static def revision() {
  return 'git rev-list --count HEAD'.execute().text.trim()
}

android {
  compileSdkVersion 27
  buildToolsVersion '27.0.3'
  defaultConfig {
    applicationId "io.sikorka.android"
    minSdkVersion 17
    targetSdkVersion 27
    versionCode 1
    versionName "1.0.0-alpha.1"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary = true

    resValue "string", "maps_key", properties["google_maps_key"]

    buildConfigField "String", "GIT_HASH", "\"${version()}\""
    buildConfigField "String", "REVISION", "\"${revision()}\""
  }

  signingConfigs {
    debug {
      storeFile file("$rootDir/debug.keystore")
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  android.applicationVariants.all { variant ->
    variant.outputs.all {
      outputFileName = "${defaultConfig.applicationId}-${variant.versionCode}-v${variant.versionName}.apk"
    }
  }
}

kotlin {
  experimental {
    coroutines 'enable'
  }
}

ext.versions = [
    support_library_version: '27.1.0',
    play_services_version  : '12.0.0',
    room_version           : '1.0.0'
]

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation "com.android.support:support-v4:${versions.support_library_version}"
  implementation "com.android.support:support-v13:${versions.support_library_version}"
  implementation "com.android.support:support-vector-drawable:${versions.support_library_version}"
  androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

  // Support libraries
  implementation "com.android.support:appcompat-v7:${versions.support_library_version}"
  implementation "com.android.support:recyclerview-v7:${versions.support_library_version}"
  implementation "com.android.support:design:${versions.support_library_version}"
  implementation "com.android.support:preference-v7:${versions.support_library_version}"
  implementation "com.android.support:preference-v14:${versions.support_library_version}"

  implementation 'com.android.support.constraint:constraint-layout:1.1.0-beta6'

  implementation 'org.ethereum:geth:1.8.2'

  implementation 'com.squareup.moshi:moshi-kotlin:1.5.0'
  implementation 'com.squareup.okio:okio:1.14.0'
  implementation 'com.squareup.okhttp3:okhttp:3.10.0'
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation 'androidx.core:core-ktx:0.2'

  //reactive extensions
  implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
// Because RxAndroid releases are few and far between, it is recommended you also
// explicitly depend on RxJava's latest version for bug fixes and new features.
  implementation 'io.reactivex.rxjava2:rxjava:2.1.12'
  implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'

  implementation 'com.jakewharton.rxrelay2:rxrelay:2.0.0'

  // Apache commons IO
  implementation group: 'commons-io', name: 'commons-io', version: '2.5'

  //dependency injection
  implementation 'com.github.stephanenicolas.toothpick:toothpick-runtime:1.1.3'
  implementation 'com.github.stephanenicolas.toothpick:smoothie:1.1.3'
  compileOnly 'javax.annotation:jsr250-api:1.0'

  kapt 'com.github.stephanenicolas.toothpick:toothpick-compiler:1.1.3'

  //android persistance (SQLite)

  // Database
  implementation "android.arch.persistence.room:runtime:${versions.room_version}"
  kapt "android.arch.persistence.room:compiler:${versions.room_version}"
  implementation "android.arch.persistence.room:rxjava2:${versions.room_version}"

  implementation "android.arch.paging:runtime:1.0.0-alpha7"

  implementation "android.arch.lifecycle:extensions:1.1.1"

  implementation 'com.github.apl-devs:appintro:v4.2.3'

  //Logging
  implementation 'com.jakewharton.timber:timber:4.6.1'

  implementation 'com.jakewharton.threetenabp:threetenabp:1.0.5'

  //Location
  implementation "com.google.android.gms:play-services-gcm:${versions.play_services_version}"
  implementation "com.google.android.gms:play-services-location:${versions.play_services_version}"
  implementation "com.google.android.gms:play-services-maps:${versions.play_services_version}"

  //coroutine
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.5"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.22.5"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:0.22.5"

  //QR support
  implementation 'me.dm7.barcodescanner:zxing:1.9.8'

  debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
  releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

  //Unit testing
  testImplementation 'junit:junit:4.12'
  testImplementation 'org.mockito:mockito-core:2.17.0'
  testImplementation 'com.github.stephanenicolas.toothpick:toothpick-testing:1.1.3'
  testImplementation "com.google.truth:truth:0.39"
  testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testImplementation "android.arch.core:core-testing:1.1.1"
  testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0'
}


kapt {
  arguments {
    arg('toothpick_registry_package_name', 'io.sikorka.android.di')
    arg("room.schemaLocation", "$projectDir/schemas".toString())
  }
}

repositories {
  jcenter()
}

configurations {
  ktlint
}

dependencies {
  ktlint "com.github.shyiko:ktlint:0.20.0"
  // additional 3rd party ruleset(s) can be specified here
  // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and
  // ktlint will pick them up
}

task ktlint(type: JavaExec, group: "verification") {
  description = "Check Kotlin code style."
  classpath = configurations.ktlint
  main = "com.github.shyiko.ktlint.Main"
  args "src/**/*.kt"
  // to generate report in checkstyle format prepend following args:
  // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
  // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
  description = "Fix Kotlin code style deviations."
  classpath = configurations.ktlint
  main = "com.github.shyiko.ktlint.Main"
  args "-F", "src/**/*.kt"
}
