apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

// load api key from properties file
def properties = new Properties()
file("$rootDir/api-keys.properties").withInputStream { properties.load(it) }

static def version() {
  return 'git rev-parse --short HEAD'.execute().text.trim()
}

static def revision() {
  return 'git rev-list --count HEAD'.execute().text.trim()
}

android {
  compileSdkVersion 28
  buildToolsVersion '28.0.2'
  defaultConfig {
    applicationId "io.sikorka.android"
    minSdkVersion 21
    targetSdkVersion 28
    versionCode 1
    versionName "1.0.0-alpha.1"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary = true

    resValue "string", "maps_key", properties["google_maps_key"]

    buildConfigField "String", "GIT_HASH", "\"${version()}\""
    buildConfigField "String", "REVISION", "\"${revision()}\""
  }

  signingConfigs {
    debug {
      storeFile file("$rootDir/debug.keystore")
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  android.applicationVariants.all { variant ->
    variant.outputs.all {
      outputFileName = "${defaultConfig.applicationId}-${variant.versionCode}-v${variant.versionName}.apk"
    }
  }

  dexOptions {
    // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
    preDexLibraries = preDexEnabled && !travisBuild
  }
}

kotlin {
  experimental {
    coroutines 'enable'
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation 'androidx.vectordrawable:vectordrawable:1.0.0-rc01'
  androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha4', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

  // Support libraries
  implementation 'androidx.appcompat:appcompat:1.0.0-rc01'
  implementation 'androidx.recyclerview:recyclerview:1.0.0-rc01'
  implementation 'com.google.android.material:material:1.0.0-rc01'
  implementation 'androidx.preference:preference:1.0.0-rc01'

  implementation 'androidx.constraintlayout:constraintlayout:1.1.2'

  implementation 'org.ethereum:geth:1.8.11'

  implementation 'com.squareup.moshi:moshi-kotlin:1.6.0'
  implementation 'com.squareup.okio:okio:1.15.0'
  implementation 'com.squareup.okhttp3:okhttp:3.11.0'
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation 'androidx.core:core-ktx:1.0.0-rc01'

  //reactive extensions
  implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
// Because RxAndroid releases are few and far between, it is recommended you also
// explicitly depend on RxJava's latest version for bug fixes and new features.
  implementation 'io.reactivex.rxjava2:rxjava:2.2.1'
  implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'
  implementation 'nl.littlerobots.rxlint:rxlint:1.6.1'

  implementation 'com.jakewharton.rxrelay2:rxrelay:2.0.0'

  // Apache commons IO
  implementation group: 'commons-io', name: 'commons-io', version: '2.5'

  // Koin for Android
  implementation 'org.koin:koin-android:1.0.0-beta-7'
  // or Koin for Lifecycle scoping
  implementation 'org.koin:koin-androidx-scope:1.0.0-beta-7'
  // or Koin for Android Architecture ViewModel
  implementation 'org.koin:koin-androidx-viewmodel:1.0.0-beta-7'

  //android persistance (SQLite)

  // Database
  implementation 'androidx.room:room-runtime:2.0.0-rc01'
  kapt 'androidx.room:room-compiler:2.0.0-rc01'
  implementation 'androidx.room:room-rxjava2:2.0.0-rc01'

  implementation 'androidx.paging:paging-runtime:2.0.0-rc01'

  implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0-rc01'

  implementation 'com.github.apl-devs:appintro:v4.2.3'

  //Logging
  implementation 'com.jakewharton.timber:timber:4.7.1'

  implementation 'com.jakewharton.threetenabp:threetenabp:1.1.0'

  //Location
  implementation "com.google.android.gms:play-services-gcm:15.0.1"
  implementation "com.google.android.gms:play-services-location:15.0.1"
  implementation "com.google.android.gms:play-services-maps:15.0.1"

  //coroutine
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.25.0"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.25.0"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:0.25.0"

  //QR support
  implementation 'me.dm7.barcodescanner:zxing:1.9.8'

  debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
  releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'

  //Unit testing
  testImplementation 'junit:junit:4.12'
  testImplementation 'org.mockito:mockito-core:2.21.0'
  testImplementation 'org.koin:koin-test:1.0.0-beta-7'
  testImplementation "com.google.truth:truth:0.42"
  testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testImplementation 'androidx.arch.core:core-testing:2.0.0-rc01'
  testImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
}


kapt {
  arguments {
    arg("room.schemaLocation", "$projectDir/schemas".toString())
  }
}

repositories {
  jcenter()
}

configurations {
  ktlint
}

dependencies {
  ktlint "com.github.shyiko:ktlint:0.27.0"
  // additional 3rd party ruleset(s) can be specified here
  // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and
  // ktlint will pick them up
}

task ktlint(type: JavaExec, group: "verification") {
  description = "Check Kotlin code style."
  classpath = configurations.ktlint
  main = "com.github.shyiko.ktlint.Main"
  args "src/**/*.kt"
  // to generate report in checkstyle format prepend following args:
  // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
  // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
  description = "Fix Kotlin code style deviations."
  classpath = configurations.ktlint
  main = "com.github.shyiko.ktlint.Main"
  args "-F", "src/**/*.kt"
}
